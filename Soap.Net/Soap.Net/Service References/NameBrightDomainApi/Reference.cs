//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NameBright.DomainApi.Soap.NameBrightDomainApi {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Domain", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib")]
    [System.SerializableAttribute()]
    public partial class Domain : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AutoRenewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool WhoIsPrivacyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoRenew {
            get {
                return this.AutoRenewField;
            }
            set {
                if ((this.AutoRenewField.Equals(value) != true)) {
                    this.AutoRenewField = value;
                    this.RaisePropertyChanged("AutoRenew");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((this.ExpirationDateField.Equals(value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Locked {
            get {
                return this.LockedField;
            }
            set {
                if ((this.LockedField.Equals(value) != true)) {
                    this.LockedField = value;
                    this.RaisePropertyChanged("Locked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WhoIsPrivacy {
            get {
                return this.WhoIsPrivacyField;
            }
            set {
                if ((this.WhoIsPrivacyField.Equals(value) != true)) {
                    this.WhoIsPrivacyField = value;
                    this.RaisePropertyChanged("WhoIsPrivacy");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DomainContacts", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib")]
    [System.SerializableAttribute()]
    public partial class DomainContacts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.Contact AdministrativeContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.Contact RegistrantContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.Contact TechnicalContactField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.Contact AdministrativeContact {
            get {
                return this.AdministrativeContactField;
            }
            set {
                if ((object.ReferenceEquals(this.AdministrativeContactField, value) != true)) {
                    this.AdministrativeContactField = value;
                    this.RaisePropertyChanged("AdministrativeContact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.Contact RegistrantContact {
            get {
                return this.RegistrantContactField;
            }
            set {
                if ((object.ReferenceEquals(this.RegistrantContactField, value) != true)) {
                    this.RegistrantContactField = value;
                    this.RaisePropertyChanged("RegistrantContact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.Contact TechnicalContact {
            get {
                return this.TechnicalContactField;
            }
            set {
                if ((object.ReferenceEquals(this.TechnicalContactField, value) != true)) {
                    this.TechnicalContactField = value;
                    this.RaisePropertyChanged("TechnicalContact");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contact", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib")]
    [System.SerializableAttribute()]
    public partial class Contact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostalCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address1 {
            get {
                return this.Address1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address1Field, value) != true)) {
                    this.Address1Field = value;
                    this.RaisePropertyChanged("Address1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address2 {
            get {
                return this.Address2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address2Field, value) != true)) {
                    this.Address2Field = value;
                    this.RaisePropertyChanged("Address2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fax {
            get {
                return this.FaxField;
            }
            set {
                if ((object.ReferenceEquals(this.FaxField, value) != true)) {
                    this.FaxField = value;
                    this.RaisePropertyChanged("Fax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Organization {
            get {
                return this.OrganizationField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationField, value) != true)) {
                    this.OrganizationField = value;
                    this.RaisePropertyChanged("Organization");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostalCode {
            get {
                return this.PostalCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostalCodeField, value) != true)) {
                    this.PostalCodeField = value;
                    this.RaisePropertyChanged("PostalCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DomainHostRecords", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib.HostRecords")]
    [System.SerializableAttribute()]
    public partial class DomainHostRecords : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord[] AAAARecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord[] ARecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord[] CNAMERecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord[] MXRecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord[] SPFRecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord[] SRVRecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord[] TXTRecordsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord[] AAAARecords {
            get {
                return this.AAAARecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.AAAARecordsField, value) != true)) {
                    this.AAAARecordsField = value;
                    this.RaisePropertyChanged("AAAARecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord[] ARecords {
            get {
                return this.ARecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.ARecordsField, value) != true)) {
                    this.ARecordsField = value;
                    this.RaisePropertyChanged("ARecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord[] CNAMERecords {
            get {
                return this.CNAMERecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.CNAMERecordsField, value) != true)) {
                    this.CNAMERecordsField = value;
                    this.RaisePropertyChanged("CNAMERecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord[] MXRecords {
            get {
                return this.MXRecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.MXRecordsField, value) != true)) {
                    this.MXRecordsField = value;
                    this.RaisePropertyChanged("MXRecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord[] SPFRecords {
            get {
                return this.SPFRecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.SPFRecordsField, value) != true)) {
                    this.SPFRecordsField = value;
                    this.RaisePropertyChanged("SPFRecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord[] SRVRecords {
            get {
                return this.SRVRecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.SRVRecordsField, value) != true)) {
                    this.SRVRecordsField = value;
                    this.RaisePropertyChanged("SRVRecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord[] TXTRecords {
            get {
                return this.TXTRecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.TXTRecordsField, value) != true)) {
                    this.TXTRecordsField = value;
                    this.RaisePropertyChanged("TXTRecords");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AAAARecord", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib.HostRecords")]
    [System.SerializableAttribute()]
    public partial class AAAARecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPV6AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubdomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TTLSecondsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPV6Address {
            get {
                return this.IPV6AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPV6AddressField, value) != true)) {
                    this.IPV6AddressField = value;
                    this.RaisePropertyChanged("IPV6Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subdomain {
            get {
                return this.SubdomainField;
            }
            set {
                if ((object.ReferenceEquals(this.SubdomainField, value) != true)) {
                    this.SubdomainField = value;
                    this.RaisePropertyChanged("Subdomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TTLSeconds {
            get {
                return this.TTLSecondsField;
            }
            set {
                if ((this.TTLSecondsField.Equals(value) != true)) {
                    this.TTLSecondsField = value;
                    this.RaisePropertyChanged("TTLSeconds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ARecord", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib.HostRecords")]
    [System.SerializableAttribute()]
    public partial class ARecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPV4AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubdomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TTLSecondsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPV4Address {
            get {
                return this.IPV4AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPV4AddressField, value) != true)) {
                    this.IPV4AddressField = value;
                    this.RaisePropertyChanged("IPV4Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subdomain {
            get {
                return this.SubdomainField;
            }
            set {
                if ((object.ReferenceEquals(this.SubdomainField, value) != true)) {
                    this.SubdomainField = value;
                    this.RaisePropertyChanged("Subdomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TTLSeconds {
            get {
                return this.TTLSecondsField;
            }
            set {
                if ((this.TTLSecondsField.Equals(value) != true)) {
                    this.TTLSecondsField = value;
                    this.RaisePropertyChanged("TTLSeconds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CNAMERecord", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib.HostRecords")]
    [System.SerializableAttribute()]
    public partial class CNAMERecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RedirectDomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubdomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TTLSecondsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RedirectDomain {
            get {
                return this.RedirectDomainField;
            }
            set {
                if ((object.ReferenceEquals(this.RedirectDomainField, value) != true)) {
                    this.RedirectDomainField = value;
                    this.RaisePropertyChanged("RedirectDomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subdomain {
            get {
                return this.SubdomainField;
            }
            set {
                if ((object.ReferenceEquals(this.SubdomainField, value) != true)) {
                    this.SubdomainField = value;
                    this.RaisePropertyChanged("Subdomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TTLSeconds {
            get {
                return this.TTLSecondsField;
            }
            set {
                if ((this.TTLSecondsField.Equals(value) != true)) {
                    this.TTLSecondsField = value;
                    this.RaisePropertyChanged("TTLSeconds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MXRecord", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib.HostRecords")]
    [System.SerializableAttribute()]
    public partial class MXRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubdomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TTLSecondsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MailServer {
            get {
                return this.MailServerField;
            }
            set {
                if ((object.ReferenceEquals(this.MailServerField, value) != true)) {
                    this.MailServerField = value;
                    this.RaisePropertyChanged("MailServer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subdomain {
            get {
                return this.SubdomainField;
            }
            set {
                if ((object.ReferenceEquals(this.SubdomainField, value) != true)) {
                    this.SubdomainField = value;
                    this.RaisePropertyChanged("Subdomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TTLSeconds {
            get {
                return this.TTLSecondsField;
            }
            set {
                if ((this.TTLSecondsField.Equals(value) != true)) {
                    this.TTLSecondsField = value;
                    this.RaisePropertyChanged("TTLSeconds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SPFRecord", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib.HostRecords")]
    [System.SerializableAttribute()]
    public partial class SPFRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SPFRecordValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubdomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TTLSecondsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SPFRecordValue {
            get {
                return this.SPFRecordValueField;
            }
            set {
                if ((object.ReferenceEquals(this.SPFRecordValueField, value) != true)) {
                    this.SPFRecordValueField = value;
                    this.RaisePropertyChanged("SPFRecordValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subdomain {
            get {
                return this.SubdomainField;
            }
            set {
                if ((object.ReferenceEquals(this.SubdomainField, value) != true)) {
                    this.SubdomainField = value;
                    this.RaisePropertyChanged("Subdomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TTLSeconds {
            get {
                return this.TTLSecondsField;
            }
            set {
                if ((this.TTLSecondsField.Equals(value) != true)) {
                    this.TTLSecondsField = value;
                    this.RaisePropertyChanged("TTLSeconds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SRVRecord", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib.HostRecords")]
    [System.SerializableAttribute()]
    public partial class SRVRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TTLSecondsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Protocol {
            get {
                return this.ProtocolField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolField, value) != true)) {
                    this.ProtocolField = value;
                    this.RaisePropertyChanged("Protocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Service {
            get {
                return this.ServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                    this.ServiceField = value;
                    this.RaisePropertyChanged("Service");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TTLSeconds {
            get {
                return this.TTLSecondsField;
            }
            set {
                if ((this.TTLSecondsField.Equals(value) != true)) {
                    this.TTLSecondsField = value;
                    this.RaisePropertyChanged("TTLSeconds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Target {
            get {
                return this.TargetField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetField, value) != true)) {
                    this.TargetField = value;
                    this.RaisePropertyChanged("Target");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TXTRecord", Namespace="http://schemas.datacontract.org/2004/07/DomainServicesLib.HostRecords")]
    [System.SerializableAttribute()]
    public partial class TXTRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubdomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TTLSecondsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextRecordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subdomain {
            get {
                return this.SubdomainField;
            }
            set {
                if ((object.ReferenceEquals(this.SubdomainField, value) != true)) {
                    this.SubdomainField = value;
                    this.RaisePropertyChanged("Subdomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TTLSeconds {
            get {
                return this.TTLSecondsField;
            }
            set {
                if ((this.TTLSecondsField.Equals(value) != true)) {
                    this.TTLSecondsField = value;
                    this.RaisePropertyChanged("TTLSeconds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TextRecord {
            get {
                return this.TextRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.TextRecordField, value) != true)) {
                    this.TextRecordField = value;
                    this.RaisePropertyChanged("TextRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://api.namebright.com", ConfigurationName="NameBrightDomainApi.IDomainService")]
    public interface IDomainService {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetDomains", ReplyAction="https://api.namebright.com/IDomainService/GetDomainsResponse")]
        NameBright.DomainApi.Soap.NameBrightDomainApi.Domain[] GetDomains();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetDomains", ReplyAction="https://api.namebright.com/IDomainService/GetDomainsResponse")]
        System.Threading.Tasks.Task<NameBright.DomainApi.Soap.NameBrightDomainApi.Domain[]> GetDomainsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetDomain", ReplyAction="https://api.namebright.com/IDomainService/GetDomainResponse")]
        NameBright.DomainApi.Soap.NameBrightDomainApi.Domain GetDomain(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetDomain", ReplyAction="https://api.namebright.com/IDomainService/GetDomainResponse")]
        System.Threading.Tasks.Task<NameBright.DomainApi.Soap.NameBrightDomainApi.Domain> GetDomainAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DomainIsAvailable", ReplyAction="https://api.namebright.com/IDomainService/DomainIsAvailableResponse")]
        bool DomainIsAvailable(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DomainIsAvailable", ReplyAction="https://api.namebright.com/IDomainService/DomainIsAvailableResponse")]
        System.Threading.Tasks.Task<bool> DomainIsAvailableAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetNameServers", ReplyAction="https://api.namebright.com/IDomainService/GetNameServersResponse")]
        string[] GetNameServers(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetNameServers", ReplyAction="https://api.namebright.com/IDomainService/GetNameServersResponse")]
        System.Threading.Tasks.Task<string[]> GetNameServersAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangeNameServers", ReplyAction="https://api.namebright.com/IDomainService/ChangeNameServersResponse")]
        bool ChangeNameServers(string domain, string[] nameservers);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangeNameServers", ReplyAction="https://api.namebright.com/IDomainService/ChangeNameServersResponse")]
        System.Threading.Tasks.Task<bool> ChangeNameServersAsync(string domain, string[] nameservers);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangeLocking", ReplyAction="https://api.namebright.com/IDomainService/ChangeLockingResponse")]
        bool ChangeLocking(string domain, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangeLocking", ReplyAction="https://api.namebright.com/IDomainService/ChangeLockingResponse")]
        System.Threading.Tasks.Task<bool> ChangeLockingAsync(string domain, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangePrivacyProtection", ReplyAction="https://api.namebright.com/IDomainService/ChangePrivacyProtectionResponse")]
        bool ChangePrivacyProtection(string domain, bool privacy);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangePrivacyProtection", ReplyAction="https://api.namebright.com/IDomainService/ChangePrivacyProtectionResponse")]
        System.Threading.Tasks.Task<bool> ChangePrivacyProtectionAsync(string domain, bool privacy);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangeAutoRenew", ReplyAction="https://api.namebright.com/IDomainService/ChangeAutoRenewResponse")]
        bool ChangeAutoRenew(string domain, bool autoRenew);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangeAutoRenew", ReplyAction="https://api.namebright.com/IDomainService/ChangeAutoRenewResponse")]
        System.Threading.Tasks.Task<bool> ChangeAutoRenewAsync(string domain, bool autoRenew);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangeContacts", ReplyAction="https://api.namebright.com/IDomainService/ChangeContactsResponse")]
        bool ChangeContacts(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.DomainContacts contacts);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/ChangeContacts", ReplyAction="https://api.namebright.com/IDomainService/ChangeContactsResponse")]
        System.Threading.Tasks.Task<bool> ChangeContactsAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.DomainContacts contacts);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetDomainContacts", ReplyAction="https://api.namebright.com/IDomainService/GetDomainContactsResponse")]
        NameBright.DomainApi.Soap.NameBrightDomainApi.DomainContacts GetDomainContacts(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetDomainContacts", ReplyAction="https://api.namebright.com/IDomainService/GetDomainContactsResponse")]
        System.Threading.Tasks.Task<NameBright.DomainApi.Soap.NameBrightDomainApi.DomainContacts> GetDomainContactsAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetHostRecords", ReplyAction="https://api.namebright.com/IDomainService/GetHostRecordsResponse")]
        NameBright.DomainApi.Soap.NameBrightDomainApi.DomainHostRecords GetHostRecords(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/GetHostRecords", ReplyAction="https://api.namebright.com/IDomainService/GetHostRecordsResponse")]
        System.Threading.Tasks.Task<NameBright.DomainApi.Soap.NameBrightDomainApi.DomainHostRecords> GetHostRecordsAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSARecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSARecordResponse")]
        bool CreateDNSARecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord aRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSARecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSARecordResponse")]
        System.Threading.Tasks.Task<bool> CreateDNSARecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord aRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSCNAMERecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSCNAMERecordResponse")]
        bool CreateDNSCNAMERecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord cnameRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSCNAMERecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSCNAMERecordResponse")]
        System.Threading.Tasks.Task<bool> CreateDNSCNAMERecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord cnameRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSMXRecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSMXRecordResponse")]
        bool CreateDNSMXRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord mxRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSMXRecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSMXRecordResponse")]
        System.Threading.Tasks.Task<bool> CreateDNSMXRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord mxRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSAAAARecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSAAAARecordResponse")]
        bool CreateDNSAAAARecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord aaaaRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSAAAARecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSAAAARecordResponse")]
        System.Threading.Tasks.Task<bool> CreateDNSAAAARecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord aaaaRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSTXTRecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSTXTRecordResponse")]
        bool CreateDNSTXTRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord txtRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSTXTRecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSTXTRecordResponse")]
        System.Threading.Tasks.Task<bool> CreateDNSTXTRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord txtRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSSRVRecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSSRVRecordResponse")]
        bool CreateDNSSRVRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord srvRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSSRVRecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSSRVRecordResponse")]
        System.Threading.Tasks.Task<bool> CreateDNSSRVRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord srvRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSSPFRecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSSPFRecordResponse")]
        bool CreateDNSSPFRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord spfRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/CreateDNSSPFRecord", ReplyAction="https://api.namebright.com/IDomainService/CreateDNSSPFRecordResponse")]
        System.Threading.Tasks.Task<bool> CreateDNSSPFRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord spfRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSARecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSARecordResponse")]
        bool DeleteDNSARecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord aRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSARecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSARecordResponse")]
        System.Threading.Tasks.Task<bool> DeleteDNSARecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord aRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSCNAMERecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSCNAMERecordResponse")]
        bool DeleteDNSCNAMERecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord cnameRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSCNAMERecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSCNAMERecordResponse")]
        System.Threading.Tasks.Task<bool> DeleteDNSCNAMERecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord cnameRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSMXRecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSMXRecordResponse")]
        bool DeleteDNSMXRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord mxRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSMXRecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSMXRecordResponse")]
        System.Threading.Tasks.Task<bool> DeleteDNSMXRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord mxRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSAAAARecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSAAAARecordResponse")]
        bool DeleteDNSAAAARecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord aaaaRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSAAAARecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSAAAARecordResponse")]
        System.Threading.Tasks.Task<bool> DeleteDNSAAAARecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord aaaaRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSTXTRecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSTXTRecordResponse")]
        bool DeleteDNSTXTRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord txtRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSTXTRecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSTXTRecordResponse")]
        System.Threading.Tasks.Task<bool> DeleteDNSTXTRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord txtRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSSRVRecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSSRVRecordResponse")]
        bool DeleteDNSSRVRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord srvRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSSRVRecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSSRVRecordResponse")]
        System.Threading.Tasks.Task<bool> DeleteDNSSRVRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord srvRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSSPFRecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSSPFRecordResponse")]
        bool DeleteDNSSPFRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord spfRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/DeleteDNSSPFRecord", ReplyAction="https://api.namebright.com/IDomainService/DeleteDNSSPFRecordResponse")]
        System.Threading.Tasks.Task<bool> DeleteDNSSPFRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord spfRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/RegisterDomain", ReplyAction="https://api.namebright.com/IDomainService/RegisterDomainResponse")]
        int RegisterDomain(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/RegisterDomain", ReplyAction="https://api.namebright.com/IDomainService/RegisterDomainResponse")]
        System.Threading.Tasks.Task<int> RegisterDomainAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/RenewDomain", ReplyAction="https://api.namebright.com/IDomainService/RenewDomainResponse")]
        int RenewDomain(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.namebright.com/IDomainService/RenewDomain", ReplyAction="https://api.namebright.com/IDomainService/RenewDomainResponse")]
        System.Threading.Tasks.Task<int> RenewDomainAsync(string domain);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDomainServiceChannel : NameBright.DomainApi.Soap.NameBrightDomainApi.IDomainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DomainServiceClient : System.ServiceModel.ClientBase<NameBright.DomainApi.Soap.NameBrightDomainApi.IDomainService>, NameBright.DomainApi.Soap.NameBrightDomainApi.IDomainService {
        
        public DomainServiceClient() {
        }
        
        public DomainServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DomainServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NameBright.DomainApi.Soap.NameBrightDomainApi.Domain[] GetDomains() {
            return base.Channel.GetDomains();
        }
        
        public System.Threading.Tasks.Task<NameBright.DomainApi.Soap.NameBrightDomainApi.Domain[]> GetDomainsAsync() {
            return base.Channel.GetDomainsAsync();
        }
        
        public NameBright.DomainApi.Soap.NameBrightDomainApi.Domain GetDomain(string domain) {
            return base.Channel.GetDomain(domain);
        }
        
        public System.Threading.Tasks.Task<NameBright.DomainApi.Soap.NameBrightDomainApi.Domain> GetDomainAsync(string domain) {
            return base.Channel.GetDomainAsync(domain);
        }
        
        public bool DomainIsAvailable(string domain) {
            return base.Channel.DomainIsAvailable(domain);
        }
        
        public System.Threading.Tasks.Task<bool> DomainIsAvailableAsync(string domain) {
            return base.Channel.DomainIsAvailableAsync(domain);
        }
        
        public string[] GetNameServers(string domain) {
            return base.Channel.GetNameServers(domain);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNameServersAsync(string domain) {
            return base.Channel.GetNameServersAsync(domain);
        }
        
        public bool ChangeNameServers(string domain, string[] nameservers) {
            return base.Channel.ChangeNameServers(domain, nameservers);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeNameServersAsync(string domain, string[] nameservers) {
            return base.Channel.ChangeNameServersAsync(domain, nameservers);
        }
        
        public bool ChangeLocking(string domain, bool locked) {
            return base.Channel.ChangeLocking(domain, locked);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeLockingAsync(string domain, bool locked) {
            return base.Channel.ChangeLockingAsync(domain, locked);
        }
        
        public bool ChangePrivacyProtection(string domain, bool privacy) {
            return base.Channel.ChangePrivacyProtection(domain, privacy);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePrivacyProtectionAsync(string domain, bool privacy) {
            return base.Channel.ChangePrivacyProtectionAsync(domain, privacy);
        }
        
        public bool ChangeAutoRenew(string domain, bool autoRenew) {
            return base.Channel.ChangeAutoRenew(domain, autoRenew);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeAutoRenewAsync(string domain, bool autoRenew) {
            return base.Channel.ChangeAutoRenewAsync(domain, autoRenew);
        }
        
        public bool ChangeContacts(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.DomainContacts contacts) {
            return base.Channel.ChangeContacts(domain, contacts);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeContactsAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.DomainContacts contacts) {
            return base.Channel.ChangeContactsAsync(domain, contacts);
        }
        
        public NameBright.DomainApi.Soap.NameBrightDomainApi.DomainContacts GetDomainContacts(string domain) {
            return base.Channel.GetDomainContacts(domain);
        }
        
        public System.Threading.Tasks.Task<NameBright.DomainApi.Soap.NameBrightDomainApi.DomainContacts> GetDomainContactsAsync(string domain) {
            return base.Channel.GetDomainContactsAsync(domain);
        }
        
        public NameBright.DomainApi.Soap.NameBrightDomainApi.DomainHostRecords GetHostRecords(string domain) {
            return base.Channel.GetHostRecords(domain);
        }
        
        public System.Threading.Tasks.Task<NameBright.DomainApi.Soap.NameBrightDomainApi.DomainHostRecords> GetHostRecordsAsync(string domain) {
            return base.Channel.GetHostRecordsAsync(domain);
        }
        
        public bool CreateDNSARecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord aRecord) {
            return base.Channel.CreateDNSARecord(domain, aRecord);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDNSARecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord aRecord) {
            return base.Channel.CreateDNSARecordAsync(domain, aRecord);
        }
        
        public bool CreateDNSCNAMERecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord cnameRecord) {
            return base.Channel.CreateDNSCNAMERecord(domain, cnameRecord);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDNSCNAMERecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord cnameRecord) {
            return base.Channel.CreateDNSCNAMERecordAsync(domain, cnameRecord);
        }
        
        public bool CreateDNSMXRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord mxRecord) {
            return base.Channel.CreateDNSMXRecord(domain, mxRecord);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDNSMXRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord mxRecord) {
            return base.Channel.CreateDNSMXRecordAsync(domain, mxRecord);
        }
        
        public bool CreateDNSAAAARecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord aaaaRecord) {
            return base.Channel.CreateDNSAAAARecord(domain, aaaaRecord);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDNSAAAARecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord aaaaRecord) {
            return base.Channel.CreateDNSAAAARecordAsync(domain, aaaaRecord);
        }
        
        public bool CreateDNSTXTRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord txtRecord) {
            return base.Channel.CreateDNSTXTRecord(domain, txtRecord);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDNSTXTRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord txtRecord) {
            return base.Channel.CreateDNSTXTRecordAsync(domain, txtRecord);
        }
        
        public bool CreateDNSSRVRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord srvRecord) {
            return base.Channel.CreateDNSSRVRecord(domain, srvRecord);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDNSSRVRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord srvRecord) {
            return base.Channel.CreateDNSSRVRecordAsync(domain, srvRecord);
        }
        
        public bool CreateDNSSPFRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord spfRecord) {
            return base.Channel.CreateDNSSPFRecord(domain, spfRecord);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDNSSPFRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord spfRecord) {
            return base.Channel.CreateDNSSPFRecordAsync(domain, spfRecord);
        }
        
        public bool DeleteDNSARecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord aRecord) {
            return base.Channel.DeleteDNSARecord(domain, aRecord);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDNSARecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.ARecord aRecord) {
            return base.Channel.DeleteDNSARecordAsync(domain, aRecord);
        }
        
        public bool DeleteDNSCNAMERecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord cnameRecord) {
            return base.Channel.DeleteDNSCNAMERecord(domain, cnameRecord);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDNSCNAMERecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.CNAMERecord cnameRecord) {
            return base.Channel.DeleteDNSCNAMERecordAsync(domain, cnameRecord);
        }
        
        public bool DeleteDNSMXRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord mxRecord) {
            return base.Channel.DeleteDNSMXRecord(domain, mxRecord);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDNSMXRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.MXRecord mxRecord) {
            return base.Channel.DeleteDNSMXRecordAsync(domain, mxRecord);
        }
        
        public bool DeleteDNSAAAARecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord aaaaRecord) {
            return base.Channel.DeleteDNSAAAARecord(domain, aaaaRecord);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDNSAAAARecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.AAAARecord aaaaRecord) {
            return base.Channel.DeleteDNSAAAARecordAsync(domain, aaaaRecord);
        }
        
        public bool DeleteDNSTXTRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord txtRecord) {
            return base.Channel.DeleteDNSTXTRecord(domain, txtRecord);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDNSTXTRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.TXTRecord txtRecord) {
            return base.Channel.DeleteDNSTXTRecordAsync(domain, txtRecord);
        }
        
        public bool DeleteDNSSRVRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord srvRecord) {
            return base.Channel.DeleteDNSSRVRecord(domain, srvRecord);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDNSSRVRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SRVRecord srvRecord) {
            return base.Channel.DeleteDNSSRVRecordAsync(domain, srvRecord);
        }
        
        public bool DeleteDNSSPFRecord(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord spfRecord) {
            return base.Channel.DeleteDNSSPFRecord(domain, spfRecord);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDNSSPFRecordAsync(string domain, NameBright.DomainApi.Soap.NameBrightDomainApi.SPFRecord spfRecord) {
            return base.Channel.DeleteDNSSPFRecordAsync(domain, spfRecord);
        }
        
        public int RegisterDomain(string domain) {
            return base.Channel.RegisterDomain(domain);
        }
        
        public System.Threading.Tasks.Task<int> RegisterDomainAsync(string domain) {
            return base.Channel.RegisterDomainAsync(domain);
        }
        
        public int RenewDomain(string domain) {
            return base.Channel.RenewDomain(domain);
        }
        
        public System.Threading.Tasks.Task<int> RenewDomainAsync(string domain) {
            return base.Channel.RenewDomainAsync(domain);
        }
    }
}
